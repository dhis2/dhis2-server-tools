---
- hosts: all
  gather_facts: false
  vars_files:
    - ../vars/vars.yml
  tasks:
    - name: Delete instance containers
      vars:
        ansible_connection: local
      community.general.lxd_container:
        name: "{{ inventory_hostname }}"
        state: absent
      when: 
        - inventory_hostname in groups['instances'] 
        - instance_state is defined 
        - instance_state == 'deleted'

    - name: Set path and regex for {{ proxy }}
      loop: "{{ groups['instances'] }}"
      ansible.builtin.set_fact:
        path: >-
          {% if proxy == 'nginx' %}
          /etc/nginx/conf.d/{{ hostvars[item]['fqdn'] | default('default', true) | trim }}.conf
          {% else %}
          /etc/apache2/sites-enabled/{{ hostvars[item]['fqdn'] | default('default', true) | trim }}.conf
          {% endif %}
        regexp: >-
          {% if proxy == 'nginx' %}
          ^\s*include\s+conf\.d/upstream/{{ item }}\.conf;$
          {% else %}
          ^\s*IncludeOptional\s+upstream/{{ item }}\.conf
          {% endif %}
      when: 
        - inventory_hostname in groups['web']
        - hostvars[item]['instance_state'] is defined
        - hostvars[item]['instance_state'] == "deleted"

    - name: Debug path and regex
      loop: "{{ groups['instances'] }}"
      ansible.builtin.debug:
        msg: "{{ regexp  }}"
      when: 
        - inventory_hostname in groups['web']
        - hostvars[item]['instance_state'] is defined
        - hostvars[item]['instance_state'] == "deleted"

    - name: Delete include location config 
      ansible.builtin.lineinfile:
        # path: "/etc/{{ proxy }}/conf.d/{{ hostvars[item]['fqdn'] | default('default', true) | trim | default('default', true) }}.conf"
        path: '{{ path | trim }}'
        # regexp: '^\s*include\s+conf\.d/upstream/{{ item }}\.conf;$'
        regexp: '{{ regexp | trim }}'
        state: absent
      loop: "{{ groups['instances'] }}"
      when: 
        - inventory_hostname in groups['web']
        - hostvars[item]['instance_state'] is defined
        - hostvars[item]['instance_state'] == "deleted"
        # - hostvars[item]['fqdn'] is defined and hostvars[item]['fqdn'] != None and (hostvars[item]['fqdn'] | trim != "") # Explore using default here

    - name: Delete {{ proxy }} location configuration
      ansible.builtin.file:
        path: /etc/{{ proxy }}/conf.d/upstream/{{ item }}.conf
        state: absent
      loop: "{{ groups['instances'] }}"
      when:
        - inventory_hostname in groups['web']
        - hostvars[item]['instance_state'] is defined
        - hostvars[item]['instance_state'] == "deleted"
      notify: Reload {{ proxy | capitalize }}

    - name: Delete database
      become: true
      become_user: postgres
      community.postgresql.postgresql_db:
        name: "{{ item }}"
        state: absent
      loop: "{{ groups['instances'] }}"
      when:
        - inventory_hostname in groups['databases']
        - hostvars[item]['instance_state'] is defined
        - hostvars[item]['instance_state'] == "deleted"

    - name: Delete database role
      become: true
      become_user: postgres
      community.general.postgresql_user:
        name: "{{ item }}"
        state: absent
      loop: "{{ groups['instances'] }}"
      when:
        - inventory_hostname in groups['databases']
        - hostvars[item]['instance_state'] is defined
        - hostvars[item]['instance_state'] == 'deleted'

    - name: Checking postgresql Versions
      become: true
      become_user: postgres
      community.general.postgresql_info:
        filter: ver*
      register: postgresql_version_info
      loop: "{{ groups['instances'] }}"
      when:
        - inventory_hostname in groups['databases']
        - hostvars[item]['instance_state'] is defined
        - hostvars[item]['instance_state'] == 'deleted'
        # - inventory_hostname == hostvars[item]['database_host']

    - name: Delete access entry in postgresql pg_hba.conf
      become: true
      ansible.builtin.lineinfile:
        path: /etc/postgresql/{{ postgresql_version_info.version.major }}/main/pg_hba.conf
        regex: host .* {{ item }} .*
        state: absent
      loop: "{{ groups['instances'] }}"
      when:
        - postgresql_version_info.version.major is defined
        - inventory_hostname in groups['databases']
        - inventory_hostname == hostvars[item]['database_host']
        - hostvars[item]['instance_state'] is defined
        - hostvars[item]['instance_state'] == 'deleted'
      notify: Reload Postgres

    - name: Delete UFW entry line
      community.general.ufw:
        rule: allow
        port: "{{ postgresql_port | default('5432') }}"
        src: "{{ hostvars[item]['ansible_host'] }}"
        proto: tcp
        comment: "Allow access from {{ item }} instance "
        delete: true
      loop: "{{ groups['instances'] }}"
      when:
        - inventory_hostname == hostvars[item]['database_host']
        - inventory_hostname in groups['databases']
        - hostvars[item]['instance_state'] is defined
        - hostvars[item]['instance_state'] == 'deleted'

  handlers:
    - name: Reload Nginx
      ansible.builtin.service:
        name: nginx
        state: reloaded

    - name: Reload Apache2
      ansible.builtin.service:
        name: apache2
        state: reloaded

    - name: Reload Postgres
      ansible.builtin.service:
        name: postgresql
        state: reloaded
