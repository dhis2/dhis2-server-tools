# WARNING: This file is automatically generated by an Ansible template.
# Any custom modifications made directly to this file will be overwritten
# during future Ansible runs.

# Please place any custom configurations in the following file
# /etc/nginx/custom/{{  hostvars[item]['fqdn']  }}.conf 

# configurations within that file will be included in this nginx configuration.

# Let local monitoring agent access stats
server {
  listen 127.0.0.1;
  server_name localhost;
  location /nginx_status {
    stub_status on;
    access_log   off;
    allow 127.0.0.1;
    deny all;
  }
}

# http block
server {
  {%if TLS_TYPE is undefined or TLS_TYPE == 'letsencrypt' -%}
  listen 80;
  server_name {{ hostvars[item]['fqdn'] | trim }};
  return 302 https://$host:{{ https_port | default("$server_port") }}$request_uri;
  {% else %}
  listen {{ http_port | default('80') }};
  server_name {{ hostvars[item]['fqdn'] | trim }};
  return 302 https://$host:{{ https_port | default("$server_port") }}$request_uri;
  {%endif-%}
}

# https block 
server {
  {%if TLS_TYPE is undefined or TLS_TYPE == 'letsencrypt' -%}
  listen 443 ssl;
  server_name {{ hostvars[item]['fqdn'] | trim }};
  # ssl settings 
  ssl_certificate /etc/letsencrypt/live/{{ hostvars[item]['fqdn'] | trim }}/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/{{ hostvars[item]['fqdn'] | trim }}/privkey.pem;
  {%elif TLS_TYPE is defined and  TLS_TYPE == 'customssl' -%}
  listen {{ https_port | default('443') }} ssl;
  server_name {{ hostvars[item]['fqdn'] | trim }};
  # ssl settings 
  ssl_certificate /etc/ssl/{{ hostvars[item]['fqdn'] | trim }}/customssl.crt;
  ssl_certificate_key /etc/ssl/{{ hostvars[item]['fqdn'] | trim }}/customssl.key;
  {%elif TLS_TYPE is defined and  TLS_TYPE == 'selfsigned' -%}
  listen {{ https_port | default('443') }} ssl;
  server_name {{ hostvars[item]['fqdn'] | trim }};
  # ssl settings 
  ssl_certificate   /etc/ssl/selfsigned/selfsigned.crt;
  ssl_certificate_key   /etc/ssl/selfsigned/selfsigned.key;
  {%endif-%}
  ssl_stapling on;
  ssl_stapling_verify  on;

  # please write your custom changes to the static/{{ hostvars[item]['fqdn'] }}.conf; and
  # will be kept across subsequent ansible runs 
{% for instance in groups['instances']
   if (hostvars[instance]['fqdn'] | default('') | trim) == (hostvars[item]['fqdn'] | default('') | trim)
   and (hostvars[instance]['fqdn'] | default('') | trim) and (hostvars[instance]['instance_state'] is undefined) %}
{% if loop.first %}
  include static/{{ hostvars[instance]['fqdn'] | trim }}.conf;
{% endif %}
{% endfor %}

  # rewrite rule
{% for instance in groups['instances']
   if (hostvars[instance]['fqdn'] | default('') | trim == hostvars[item]['fqdn'] | trim)
   and (hostvars[instance]['instance_state'] is not defined)
   and (hostvars[instance]['dhis2_base_path'] | default('') != 'ROOT')
   and (hostvars[instance]['proxy_rewrite'] | default(false) in [true, 'true']) %}
  {% if loop.first %}
  rewrite ^/$ /{{ hostvars[instance]['dhis2_base_path'] | default(instance) | to_fixed_string }};
  {% endif %}
{% endfor %}

   # Location configuration for  the instances 
{% for instance in groups['instances']
     if (hostvars[instance]['fqdn'] | default('') | trim == hostvars[item]['fqdn'] | trim)
     and (hostvars[instance]['instance_state'] is undefined) %}
    include conf.d/upstream/{{ instance | to_fixed_string }}.conf;
{% endfor %}

{% set monitoring = (server_monitoring | default('') | lower | trim) %}
  # Location configs for server monitoring 
{% if monitoring == 'munin' %}
  include conf.d/upstream/munin.conf;
{% elif monitoring in ['grafana', 'prometheus', 'grafana/prometheus'] %}
  include conf.d/upstream/grafana.conf;
{% elif monitoring %}
  # server_monitoring is set but not recognized: {{ server_monitoring }}
{% else %}
  # server_monitoring is not defined or empty
{% endif %}
  # Return 444 if nothing is served  on '/'
  {% for instance in groups['instances']
   if (hostvars[instance]['fqdn'] | default('') | trim == hostvars[item]['fqdn'] | trim)
   and ('ROOT' not in groups['instances']
          | map('extract', hostvars, 'dhis2_base_path')
          | map('default', 'None')) %}
{% if loop.first %}
  location / {
    return 444;
  }
{% endif %}
{% endfor %}

if ($host != "{{ hostvars[item]['fqdn'] | trim }}") {
  return 444;
    }
}
