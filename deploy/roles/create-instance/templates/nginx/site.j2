# Let local monitoring agent access stats
server {
  listen 127.0.0.1;
  server_name localhost;
  location /nginx_status {
    stub_status on;
    access_log   off;
    allow 127.0.0.1;
    deny all;
  }
}

# http block
server {
  listen 80 ;
  server_name {{ hostvars[item]['fqdn'] | trim }};
  return 301 https://$host$request_uri;
}

# https block 
server {
  listen 443 ssl;
  ssl_stapling on;
  ssl_stapling_verify  on;
  server_name {{ hostvars[item]['fqdn'] | trim }};
{%if TLS_TYPE is undefined or TLS_TYPE == 'letsencrypt' %} 
  ssl_certificate /etc/letsencrypt/live/{{ hostvars[item]['fqdn'] | trim }}/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/{{ hostvars[item]['fqdn'] | trim }}/privkey.pem;
{%elif TLS_TYPE is defined and  TLS_TYPE == 'customssl' %}
  ssl_certificate /etc/ssl/{{ hostvars[item]['fqdn'] | trim }}/customssl.crt;
  ssl_certificate_key /etc/ssl/{{ hostvars[item]['fqdn'] | trim }}/customssl.key;
{%elif TLS_TYPE is defined and  TLS_TYPE == 'selfsigned' %}
  ssl_certificate     /etc/ssl/selfsigned/selfsigned.crt;
  ssl_certificate_key /etc/ssl/selfsigned/selfsigned.key;
{%endif%}
  ssl_protocols TLSv1.2 TLSv1.3;
  #ssl_session_cache shared:SSL:20m;
  ssl_session_timeout 10h;
  ssl_dhparam /etc/nginx/dhparams.pem;
  ssl_prefer_server_ciphers on;
  underscores_in_headers on;
  add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
  add_header Referrer-Policy "no-referrer";
  add_header X-XSS-Protection "1; mode=block" always;
  keepalive_timeout 10; # helps mitigate denial of service attacks that establish too many persistent connections, exhausting server resources.
  send_timeout 10; # mitigate slow HTTP denial of service attacks by ensuring write operations taking up large amounts of time are closed.
  error_log /var/log/nginx/error.log info;
  ssl_session_tickets off;
  client_body_timeout 10;
  client_header_timeout 10;
  client_max_body_size 100M;
  proxy_set_header X-Frame-Options "SAMEORIGIN";
  # in case your want access your site on 
# This is quite strict.  If you have much older windoze browsers
  ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';
  
{% for instance in groups['instances']  if (hostvars[instance]['fqdn'] is defined) and
(hostvars[instance]['fqdn'] | trim  == hostvars[item]['fqdn'] | trim ) and
'ROOT' not in groups['instances']  | map('extract', hostvars, 'dhis2_base_path') | map('default', 'None') and
(hostvars[instance]['proxy_rewrite'] | default(false) == true or hostvars[instance]['proxy_rewrite'] | default('false') == "true") %}
{% if loop.first %}
  rewrite ^/$ /{{ hostvars[instance]['dhis2_base_path']  | default(instance)| to_fixed_string }}; 
{%endif%}
{%endfor%}

{% for instance  in groups['instances'] if (hostvars[instance]['fqdn'] is defined) and 
(hostvars[instance]['fqdn'] | trim == hostvars[item]['fqdn'] | trim ) %}
    include  conf.d/upstream/{{ instance | to_fixed_string }}.conf;
{%endfor%}
    include  conf.d/upstream/munin.conf;

{% for instance  in groups['instances'] if (hostvars[instance]['fqdn'] is defined) and
(hostvars[instance]['fqdn'] | trim  == hostvars[item]['fqdn'] | trim ) and 
'ROOT' not in groups['instances'] | map('extract', hostvars, 'dhis2_base_path') | map('default', 'None') %}
{% if loop.first %}
location / {
  return 444;
  }
{%endif%}
{%endfor%}

  if ($host != "{{ hostvars[item]['fqdn'] | trim }}") {
    return 444;
    }
}
