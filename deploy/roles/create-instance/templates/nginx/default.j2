# WARNING: This file is automatically generated by an Ansible template.
# Any custom modifications made directly to this file will be overwritten
# during future Ansible runs.

# Please place any custom configurations in the following file
# /etc/nginx/custom/default.conf 

# configurations in  /etc/nginx/static/default.conf are be included in this nginx configuration.


# Let local monitoring agent access stats
server {
  listen 127.0.0.1;
  server_name localhost;
  location /nginx_status {
    stub_status on;
    access_log   off;
    allow 127.0.0.1;
    deny all;
  }
}

# http block
server {
  listen {{ http_port | default('80') }};
  server_name _;
  return 302 https://$host:{{ https_port | default("$server_port") }}$request_uri;
}

# https block 
server {
  listen {{ https_port | default('443') }} ssl;
  server_name _;
  include static/default.conf;

  {% for instance in groups['instances']
   if (hostvars[instance]['instance_state'] is not defined)
   and (hostvars[instance]['proxy_rewrite'] | default(false) in [true, 'true'])
   and not (hostvars[instance]['fqdn'] | default('', true) | trim) and ('ROOT' not in groups['instances'] |
        map('extract', hostvars, 'dhis2_base_path') |
        map('default', 'None')) %}
  {% if loop.first %}
  # in case you want '/' access re-written to /{{ hostvars[instance]['dhis2_base_path'] | default(instance) | to_fixed_string }}
  rewrite ^/$ /{{ hostvars[instance]['dhis2_base_path'] | default(instance) | to_fixed_string }};
  {% endif %}
{% endfor %}

# location configs for dhis2 instances
{% for instance  in groups['instances']  if (hostvars[instance]['instance_state'] is not defined) 
and not (hostvars[instance]['fqdn'] | default('', true) | trim) %} 
  include  conf.d/upstream/{{ instance | to_fixed_string }}.conf;
{%endfor%}

{% set monitoring = (server_monitoring | default('') | lower | trim) %}
{% if monitoring == 'munin' %}
  # Location config for Munin server backend
  include conf.d/upstream/munin.conf;
{% elif monitoring in ['grafana', 'prometheus', 'grafana/prometheus'] %}
  # Location config for Grafana/Prometheus backend
  include conf.d/upstream/grafana.conf;
{% elif monitoring %}
  # server_monitoring is defined but not recognized:  {{ server_monitoring }}
{% else %}
  # server_monitoring is not defined or empty
{% endif %}

{% for instance  in groups['instances'] if 'ROOT' not in groups['instances'] |
    map('extract', hostvars, 'dhis2_base_path') | map('default', 'None') %}
{% if loop.first %}
location / {
  return 444;
  }
{%endif%}
{%endfor%}
}

