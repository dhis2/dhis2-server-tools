# WARNING: This file is automatically generated by an Ansible template.
# Any custom modifications made directly to this file will be overwritten
# during future Ansible runs.

# Please place any custom configurations in the following file
# /etc/apache2/static/{{ fqdn }}.conf 

# configurations within that file will be included in this apache2 configuration.

<VirtualHost 127.0.0.1:80>
  # Let local monitoring agent access stats
  <Location /server-status>
      Require all denied
      Require local
      Require ip 127.0.0.1 ::1
  </Location>
</VirtualHost>

<IfModule mod_ssl.c>
  # Global server configuration
  ServerTokens Prod
  ServerSignature Off
   
  # SSL Stapling Cache - required globally
  SSLUseStapling on
  SSLStaplingCache "shmcb:logs/ssl_staple_cache(512000)"

  <VirtualHost *:80>
        ServerName {{ hostvars[item]['fqdn'] | trim  }}
        ServerAdmin {{ email if email is match('^(?!.*\\.example\\.com$)[\\w\\.-]+@[\\w\\.-]+\\.\\w+$') else 'admin@' + (hostvars[item]['fqdn'] | trim).split('.')[-2:] | join('.') }}
        RewriteEngine On

        # Let Certbot ACME challenge pass

        <Location /.well-known/acme-challenge>
          Require all denied
          Require host letsencrypt.org
        </Location>

       # Redirect all HTTP to HTTPS except ACME challenge
       {# RewriteRule !^/.well-known/acme-challenge/ https://%{HTTP_HOST} [L,R=permanent] -#}
       RewriteRule ^/(?!\.well-known/acme-challenge/) https://%{HTTP_HOST}$0 [L,R=301]
    </VirtualHost>

# Main vhost configuration
  <VirtualHost *:443>
       ServerName {{ hostvars[item]['fqdn'] | trim }}
       ServerAdmin {{ email if email is match('^(?!.*\\.example\\.com$)[\\w\\.-]+@[\\w\\.-]+\\.\\w+$') else 'admin@' + (hostvars[item]['fqdn'] | trim).split('.')[-2:] | join('.') }}

       #===========================================================
       # SSL configuration
       #===========================================================

       # set these to match your server certificate and key
{% if TLS_TYPE is undefined or TLS_TYPE == 'letsencrypt' %}
       SSLCertificateFile      /etc/letsencrypt/live/{{ (hostvars[item]['fqdn'] | trim) }}/fullchain.pem
       SSLCertificateKeyFile /etc/letsencrypt/live/{{ (hostvars[item]['fqdn'] | trim) }}/privkey.pem
{% elif  TLS_TYPE is defined and  TLS_TYPE == 'customssl' %}
       SSLCertificateFile /etc/ssl/{{ (hostvars[item]['fqdn'] | trim) }}/customssl.crt
       SSLCertificateKeyFile /etc/ssl/{{ (hostvars[item]['fqdn'] | trim) }}/customssl.key
{% elif TLS_TYPE is defined and  TLS_TYPE == 'selfsigned' %}
       SSLCertificateFile /etc/ssl/selfsigned/selfsigned.crt
       SSLCertificateKeyFile /etc/ssl/selfsigned/selfsigned.key
{%endif%}
       # SSLOpenSSLConfCmd DHParameters "/etc/ssl/certs/dhparam.pem"
       
       # Throw out IP based requests
       RewriteEngine On
       RewriteCond %{HTTP_HOST} !^{{ '\\.'.join((hostvars[item]['fqdn'] | trim).split('.')) }} [NC]
       RewriteCond %{REQUEST_URI} !^/error [NC]
       RewriteRule ^.(.*) - [L,F]

       # Include static configurations, 
       IncludeOptional   static/{{ fqdn }}.conf
      
        # RewriteRule   ^/$  /dhis/  [R]
{% for instance in groups['instances']  if (hostvars[instance]['fqdn'] is defined)  and
(hostvars[instance]['fqdn'] | trim  == hostvars[item]['fqdn'] | trim ) and 
'ROOT' not in groups['instances'] | map('extract', hostvars, 'dhis2_base_path') | map('default', 'None') and
(hostvars[instance]['proxy_rewrite'] | default(false) == true or 
hostvars[instance]['proxy_rewrite'] | default('false') == "true") %}
{% if loop.first %}
       RewriteRule   ^/$  /{{ hostvars[instance]['dhis2_base_path'] | default(instance) | to_fixed_string }}/  [R]
{%endif%}
{%endfor%}
       #===========================================================
       # tomcat backends.  These configs are read from files in
       # <server-root>/upstream directory
       # To add a backend, place a file there with contents like:
       #
       # <Location /test1>
       #  Require all granted
       #  ProxyPass "http://192.168.0.11:8080/test1"
       #  ProxyPassReverse "http://192.168.0.11:8080/test1"
       # </Location>
       #===========================================================
       {% for instance  in groups['instances'] if (hostvars[instance]['fqdn'] is defined) and 
       (hostvars[instance]['fqdn'] | trim == hostvars[item]['fqdn'] | trim  )  -%}
       IncludeOptional upstream/{{ instance | to_fixed_string }}.conf
       {%endfor%}
       IncludeOptional  upstream/munin.conf

       #===========================================================
       # Restrictions on other locations
       #===========================================================
       <Directory />
               Require all denied
       	Options None
               AllowOverride None
       </Directory>

       # You need this if you are going to have a landing page
       # Else set "Require all denied" below
       <Directory /var/www/html>
               Require all granted
               Options None
               AllowOverride None
               # Limit HTTP methods to standard methods. Note: Does not limit TRACE
               <LimitExcept GET POST OPTIONS>
                  Require all denied
               </LimitExcept>
       </Directory>

       # BrowserMatch "MSIE [2-6]" \
       #          nokeepalive ssl-unclean-shutdown \
       #          downgrade-1.0 force-response-1.0
       # BrowserMatch "MSIE [17-9]" ssl-unclean-shutdown
  </VirtualHost>
</IfModule>
