# ----------------------------------------------------------------------
# Database connection for PostgreSQL
# ----------------------------------------------------------------------
# Hibernate SQL dialect
connection.dialect = org.hibernate.dialect.PostgreSQLDialect

# JDBC driver class
connection.driver_class = org.postgresql.Driver

# Database connection URL
{% for host in groups['databases'] %}
    {% if hostvars[inventory_hostname]['database_host'] == host %}
connection.url = jdbc:postgresql://{{ hostvars[host]['ansible_host'] }}/{{ inventory_hostname }}
    {% endif %}
{% endfor %}
# Database username
connection.username = {{ inventory_hostname }}


# Database password (sensitive)
connection.password = {{ db_password }}

# Database schema behavior, can be 'validate', 'update', 'create', 'create-drop'
connection.schema = update

# Max size of connection pool (default: 80)
# connection.pool.max_size = 80

# ----------------------------------------------------------------------
# System
# ----------------------------------------------------------------------

# System mode for database read operations only, can be 'off', 'on'
# system.read_only_mode = off

# Session timeout in seconds, default is 3600
# system.session.timeout = 3600

# SQL view protected tables, can be 'on', 'off'
# system.sql_view_table_protection = on

# server.base.url = https://play.dhis2.org/dev

# ----------------------------------------------------------------------
# Encryption
# ----------------------------------------------------------------------

# Encryption password (sensitive)
# encryption.password = xxxx

# ----------------------------------------------------------------------
# File store
# ----------------------------------------------------------------------

# File store provider, currently 'filesystem' and 'aws-s3' are supported
# filestore.provider = filesystem

# Directory / bucket name, refers to folder within DHIS2_HOME on file system, 'bucket' on AWS S3
# filestore.container = files

# Datacenter location (not required)
# filestore.location = eu-west-1

# Public identity / username
# filestore.identity = dhis2-id

# Secret key / password (sensitive)
# filestore.secret = xxxx

# ----------------------------------------------------------------------
# LDAP
# ----------------------------------------------------------------------

# LDAP server URL
# ldap.url = ldaps://300.20.300.20:636

# LDAP manager user distinguished name
# ldap.manager.dn = cn=JohnDoe,ou=Country,ou=Admin,dc=hisp,dc=org

# LDAP manager user password (sensitive)
# ldap.manager.password = xxxx

# LDAP entry distinguished name search base
# ldap.search.base = dc=hisp,dc=org

# LDAP entry distinguished name filter
# ldap.search.filter = (cn={0})

# ----------------------------------------------------------------------
# Node
# ----------------------------------------------------------------------

# Node identifier, optional, useful in clusters
# node.id = 'node-1'

# ----------------------------------------------------------------------
# Analytics
# ----------------------------------------------------------------------

# Analytics server-side cache expiration in seconds
analytics.cache.expiration = 3600
# Analytics table logging, options: ON, OFF default: ON
analytics.table.unlogged = {{ analytics.table.unlogged | default('ON') }} 

# ----------------------------------------------------------------------
# System monitoring
# ----------------------------------------------------------------------

# System monitoring URL
# system.monitoring.url =

# System monitoring username
# system.monitoring.username =

# System monitoring password
# system.monitoring.password =

# Enabling metrics endpoint
{% if server_monitoring  in  ['grafana', 'prometheus', 'grafana/prometheus'] %}
monitoring.api.enabled = on
monitoring.jvm.enabled = on
monitoring.dbpool.enabled = on
monitoring.uptime.enabled = on
monitoring.cpu.enabled = on
{% endif %}

{% if analytics_database |  default('')  == 'doris' %}
# Analytics database management system
analytics.database = doris

# Analytics database JDBC driver class
analytics.connection.driver_class = com.mysql.cj.jdbc.Driver

# Analytics database connection URL
analytics.connection.url = jdbc:mysql://172.19.2.40:9030/analytics

# Analytics database username
analytics.connection.username = <doris_user>

# Analytics database password
analytics.connection.password = <doris_database_password>
{% endif %}
