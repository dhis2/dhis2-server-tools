---
- name: Checking postgresql Version
  become: true
  become_user: postgres
  community.postgresql.postgresql_info:
    filter: ver*
  register: postgresql_version_info

- name: Edit pg_hba.conf permissions, allowing instances to connect
  become: true
  ansible.builtin.lineinfile:
    path: /etc/postgresql/{{ postgresql_version_info.version.major }}/main/pg_hba.conf
    insertafter: EOF
    regexp: '^host\s+{{ item }}\s+.*$'
    line: host     {{ item }}    {{ item }}  {{ hostvars[item]['ansible_host'] }}/32  scram-sha-256
  loop: "{{ groups['instances'] }}"
  when:
    - inventory_hostname == hostvars[item]['database_host']
    - db_gateway_address is undefined
    - item in ansible_play_hosts
  notify: Reload Postgres
  tags: [never]

- name: Edit pg_hba.conf using community.postgresql.postgresql_pg_hba module
  community.postgresql.postgresql_pg_hba:
    dest: /etc/postgresql/{{ postgresql_version_info.version.major }}/main/pg_hba.conf
    contype: host
    users: "{{ item }}"
    source: "{{ hostvars[item]['ansible_host'] }}/32"
    databases: "{{ item }}"
    method: "scram-sha-256"
  loop: "{{ groups['instances'] }}"
  when:
    - inventory_hostname == hostvars[item]['database_host']
    - db_gateway_address is undefined
    - item in ansible_play_hosts
  notify: Reload Postgres

- name: Firewall | Open port 5432 from dhis2 instances
  community.general.ufw:
    rule: allow
    port: "{{ postgresql_port | default('5432') }}"
    src: "{{ hostvars[item]['ansible_host'] }}"
    proto: tcp
    comment: "Allow access from {{ item }} instance "
    state: enabled
  loop: "{{ groups['instances'] }}"
  when:
    - item in ansible_play_hosts
    - inventory_hostname == hostvars[item]['database_host']
    - db_gateway_address is undefined

- name: Edit pg_hba.conf permissions, instances db_gateway_address
  become: true
  ansible.builtin.lineinfile:
    path: /etc/postgresql/{{ postgresql_version_info.version.major }}/main/pg_hba.conf
    regexp: '^host\s+({{ item }}).*$'
    insertafter: EOF
    line: host     {{ item }}    {{ item }}   {{ db_gateway_address }}/32  scram-sha-256
  loop: "{{ groups['instances'] }}"
  when:
    - item in ansible_play_hosts
    - inventory_hostname == hostvars[item]['database_host']
    - db_gateway_address is defined
  notify: Reload Postgres

- name: Firewall | Open port 5432 from db_gateway_address
  community.general.ufw:
    rule: allow
    port: "{{ postgresql_port | default('5432') }}"
    src: "{{ db_gateway_address }}"
    proto: tcp
    comment: Allow access from {{ db_gateway_address }}
    state: enabled
  loop: "{{ groups['instances'] }}"
  when:
    - item in ansible_play_hosts
    - inventory_hostname == hostvars[item]['database_host']
    - db_gateway_address is defined

- name: "Create instances database role:"
  become: true
  become_user: postgres
  community.general.postgresql_user:
    name: "{{ item }}"
    state: present
    password: "{{ hostvars[item]['db_password'] }}"
  loop: "{{ groups['instances'] }}"
  when:
    - item in ansible_play_hosts
    - hostvars[item]['db_password'] is defined
    - inventory_hostname == hostvars[item]['database_host']
  notify: Reload Postgres

- name: Creating dhis2 database/databases
  become: true
  become_user: postgres
  community.postgresql.postgresql_db:
    name: "{{ item }}"
    state: present
    owner: "{{ item }}"
  loop: "{{ groups['instances'] }}"
  when:
    - item in ansible_play_hosts
    - inventory_hostname == hostvars[item]['database_host']
  notify: Reload Postgres

- name: Creating postgis,btree_gin and pg_trgm extensions
  become: true
  become_user: postgres
  community.general.postgresql_ext:
    db: "{{ item.0 }}"
    name: "{{ item.1 }}"
  with_nested:
    - "{{ groups['instances'] }}"
    - "{{ postgresql_extensions }}"
  when:
    - item.0 in ansible_play_hosts
    - hostvars[item.0]['db_password'] is defined
    - inventory_hostname == hostvars[item.0]['database_host']
  loop_control:
    label: "{{ item.1 }}"
  notify: Reload Postgres

- name: Flushing Handlers
  ansible.builtin.meta: flush_handlers
