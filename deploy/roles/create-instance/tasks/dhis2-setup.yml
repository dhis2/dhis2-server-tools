---
- name: Download dhis2 releases.json file
  vars:
    ansible_connection: local
  become: false
  ansible.builtin.get_url:
    url: https://releases.dhis2.org/v1/versions/stable.json
    dest: vars/releases.json
    force: true
    mode: "0666"
  when: dhis2_war_file is undefined and dhis2_version is defined and dhis2_version | type_debug == "float"
  changed_when: false

- name: Load releases.json file
  vars:
    ansible_connection: local
  ansible.builtin.include_vars:
    file: releases.json
    name: dhis2_releases
  when: dhis2_war_file is undefined and dhis2_version is defined and dhis2_version | type_debug == "float"

- name: Set DHIS2 release version
  ansible.builtin.set_fact:
    dhis2_release_version: "{{ dhis2_releases.versions | selectattr('name', 'eq', ('%.2f' | format(dhis2_version))) | first }}"
  when: dhis2_releases is defined

- name: Set dhis2_latest_patchversion and sha256
  vars:
    ansible_connection: local
  ansible.builtin.set_fact:
    sha256: "{{ dhis2_release_version['sha256'] | default(omit) }}"
    latest_patchversion: "{{ (dhis2_release_version['patchVersions'] | last).name | default(omit) }}"
  when: dhis2_release_version is defined

- name: "Set dhis2_url "
  vars:
    ansible_connection: local
  ansible.builtin.set_fact:
    dhis2_url: "{{ dhis2_release_version['latestStableUrl'] }}"
  when: dhis2_release_version is defined

- name: Updating and Upgrading packages
  ansible.builtin.apt:
    upgrade: "yes"
    update_cache: true
    cache_valid_time: 3600

- name: Installing java and tomcat and zip
  ansible.builtin.apt:
    update_cache: true
    cache_valid_time: 3600
    name:
      - unzip
      - tomcat{{ tomcat_version | default('9') }}
      - tomcat{{ tomcat_version | default('9') }}-admin
      - openjdk-{{ JAVA_VERSION }}-jre-headless
      - ufw

- name: Creating /opt/dhis2 directory
  ansible.builtin.file:
    path: /opt/dhis2
    state: directory
    owner: tomcat
    mode: "0700"
    modification_time: preserve
    access_time: preserve

- name: Get sha256sum of dhis2.war file
  ansible.builtin.stat:
    path: /opt/dhis2/dhis2.war
    checksum_algorithm: sha256
  register: dhis2_war_stat

- name: Check running dhis2 version
  ansible.builtin.shell:
    cmd: unzip -q -p  /var/lib/tomcat{{ tomcat_version | default('9') }}/webapps/{{ dhis2_base_path | default(inventory_hostname) | to_fixed_string }}/WEB-INF/lib/dhis-service-core-*.jar build.properties | awk -F' *= *' '$1=="build.version"{print $2}'
    removes: /var/lib/tomcat{{ tomcat_version | default('9') }}/webapps/{{  dhis2_base_path | default(inventory_hostname) | to_fixed_string }}/WEB-INF/lib/dhis-service-core-*.jar
  register: version_results
  changed_when: false

- ansible.builtin.debug:
    msg:
      - "Running release: {{ version_results.stdout | trim }}"
      - "Latest patch release: {{ latest_patchversion }}"
      - set dhis2_auto_upgrade=True in your inventory file to enable automatic upgrade.
      - Prior to the upgrade, it is important to have a backup of your instance database
  when:
    - latest_patchversion is defined
    - version_results is defined
    - "'skipped' not in  version_results.stdout"
    - version_results.stdout | trim is version(latest_patchversion, '<')

- name: Download dhis2 war file
  ansible.builtin.get_url:
    url: "{{ dhis2_url }}"
    dest: /opt/dhis2/dhis2.war
    force: true
    mode: "0644"
    # checksum: "sha256:{{ sha256 }}"
  when:
    - latest_patchversion is defined
    - dhis2_url is defined
    - "'skipped' in version_results.stdout or (version_results.stdout | trim is version(latest_patchversion, '<') and dhis2_auto_upgrade | default(false) | bool)"
    - sha256 is defined

- name: Download dhis2.war with hard coded url
  ansible.builtin.get_url:
    url: "{{ dhis2_war_file }}"
    timeout: 120
    dest: /opt/dhis2/dhis2.war
    force: true
    mode: "0644"
  when: dhis2_war_file is defined and dhis2_war_file | regex_search('(https:\/\/)')

- name: Copy dhis2.war file from ansible controller
  ansible.builtin.copy:
    src: "{{ dhis2_war_file }}"
    dest: /opt/dhis2/dhis2.war
    mode: "0644"
  when: dhis2_war_file is defined and dhis2_war_file | regex_search('^(?!.*?https:\/\/).*$')

- name: Clean /var/lib/tomcat{{ tomcat_version | default('9') }}/webapps
  ansible.builtin.file:
    path: /var/lib/tomcat{{ tomcat_version | default('9') }}/webapps/
    state: absent
  when: "'skipped' in version_results.stdout or (latest_patchversion is defined and version_results.stdout | trim is version(latest_patchversion, '<') and dhis2_auto_upgrade
    | default(false) | bool ) or dhis2_war_file is defined"

- name: Creating webapps directories
  ansible.builtin.file:
    path: /var/lib/tomcat{{ tomcat_version | default('9') }}/webapps/{{ dhis2_base_path | default(inventory_hostname) | to_fixed_string }}
    mode: "0755"
    state: directory
  notify: Restart Tomcat

- name: Copy dhis2.conf to the instances
  ansible.builtin.template:
    src: dhis.conf.j2
    dest: /opt/dhis2/dhis.conf
    mode: "0640"
    owner: root
    group: tomcat
  when: db_password is defined
  ignore_errors: true
  notify: Restart Tomcat

- name: Copy server.xml to the instances
  ansible.builtin.copy:
    src: server.xml
    dest: /etc/tomcat{{ tomcat_version | default('9') }}/server.xml
    mode: "0640"
    owner: root
    group: tomcat
  notify: Restart Tomcat

- name: Creating tomcat{{ tomcat_version | default('9') }}.service.d  directory
  ansible.builtin.file:
    owner: root
    group: root
    mode: "0755"
    path: /etc/systemd/system/tomcat{{ tomcat_version | default('9') }}.service.d
    state: directory
  notify: Restart Tomcat

- name: Create systemd override file for tomcat{{ tomcat_version | default('9') }}
  ansible.builtin.template:
    src: tomcat_overrides.j2
    dest: /etc/systemd/system/tomcat{{ tomcat_version | default('9') }}.service.d/override.conf
    mode: "0644"
    owner: root
    group: root
  notify: Restart Tomcat

- name: Restrict tomcat user from running cron
  ansible.builtin.lineinfile:
    path: /etc/cron.deny
    state: present
    create: true
    line: tomcat
    owner: root
    group: root
    mode: "0600"

- name: Restrict tomcat user from scheduling and running commands
  ansible.builtin.lineinfile:
    path: /etc/at.deny
    owner: root
    group: root
    state: present
    line: tomcat
    create: true
    mode: "0600"

- name: Copy tomcat default configuration
  ansible.builtin.template:
    src: tomcat_default.j2
    dest: /etc/default/tomcat{{ tomcat_version | default('9') }}
    mode: "0644"
    owner: root
    group: root
  notify: Restart Tomcat

- name: Extracting dhis2.war file
  ansible.builtin.unarchive:
    src: /opt/dhis2/dhis2.war
    dest: /var/lib/tomcat{{ tomcat_version | default('9') }}/webapps/{{ dhis2_base_path | default(inventory_hostname) | to_fixed_string }}
    remote_src: true
  notify: Restart Tomcat

- name: Glowroot app monitoring
  ansible.builtin.include_tasks: "{{ app_monitoring }}.yml"
  when: app_monitoring is defined

- name: Open port 8080 (tomcat) access from from proxy
  community.general.ufw:
    rule: allow
    port: "{{ tomcat_port | default('8080') }}"
    src: "{{ hostvars[item]['ansible_host'] }}"
    proto: tcp
    state: enabled
    comment: tomcat access from the proxy
  loop: "{{ groups['web'] }}"

- name: Open port 4000 (glowroot) access from proxy
  community.general.ufw:
    rule: allow
    port: "{{ glow_root_port | default('4000') }}"
    src: "{{ hostvars[item]['ansible_host'] }}"
    proto: tcp
    comment: Glowroot monitor access from proxy
    state: enabled
  loop: "{{ groups['web'] }}"
  when: >
    app_monitoring is defined and
    app_monitoring == "glowroot"

- name: Flushing handlers
  ansible.builtin.meta: flush_handlers
