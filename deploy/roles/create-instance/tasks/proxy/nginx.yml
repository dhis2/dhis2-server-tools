---
# consider creating custom filter for this task.
# Rigt now, it does not work when fqdn is not defined
- name: Assert two instances using the same fqdn have unique Instance Names
  ansible.builtin.assert:
    that:
      - hostvars[item]['dhis2_base_path'] != hostvars[ansible_loop.nextitem]['dhis2_base_path']
    fail_msg: "Instances Names for {{ item }}: hostvars[item]['dhis2_base_path'] and {{ ansible_loop.nextitem }}: hostvars[item]['dhis2_base_path'] are the same"
  loop: "{{ groups['instances'] }}"
  loop_control:
    extended: true
    label: "{{ item }}"
  when:
    - ansible_loop.nextitem is defined
    - hostvars[item]['dhis2_base_path'] is defined and  hostvars[ansible_loop.nextitem]['dhis2_base_path'] is defined
    - hostvars[item]['fqdn'] is defined and hostvars[ansible_loop.nextitem]['fqdn'] is defined
    - hostvars[item]['fqdn'] == hostvars[ansible_loop.nextitem]['fqdn']

- name: Include TLS configurarion tasks
  ansible.builtin.include_tasks: "tls/{{ TLS_TYPE | default('letsencrypt') }}.yml"
  loop: "{{ groups['instances'] }}"
  when:
    - hostvars[item]['fqdn'] | default('', true) | trim
    - hostvars[item]['instance_state'] is undefined

- name: Instance location configuration
  ansible.builtin.template:
    src: nginx/instance.j2
    dest: /etc/nginx/conf.d/upstream/{{ item | to_fixed_string }}.conf
    owner: root
    group: root
    # force: false, # this file dynamically changes e.g when dhis2_base_path is set
    mode: "0640"
  loop: "{{ groups['instances'] }}"
  notify: Reload Nginx
  when:
    - hostvars[item]['instance_state'] is undefined

- name: Include selfsigned TLS Certificate tasks, fqdn is not defined
  ansible.builtin.include_tasks: ./tls/selfsigned.yml
  loop: "{{ groups['instances'] }}"
  when:
    - not (hostvars[item]['fqdn'] | default('', true) | trim)
    - hostvars[item]['instance_state'] is undefined

- name: Find files to delete in /etc/nginx/conf.d/
  ansible.builtin.find:
    paths: /etc/nginx/conf.d/
    patterns: '*'
    file_type: file
    excludes: "{{ groups['instances'] | map('extract', hostvars, 'fqdn') | map('default', 'default', true) | map('regex_replace', '^\\s+|\\s+$', '') | unique | map('regex_replace', '^$', 'default') | map('regex_replace', '(.+)', '\\1.conf') | list }}"
  register: found_files

- name: Clean /etc/nginx/conf.d/ directory
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop: "{{ found_files['files'] | map(attribute='path') }}"

- name: Copy static Nginx config for valid FQDNs
  ansible.builtin.copy:
    src: nginx/static.conf
    dest: /etc/nginx/static/{{ hostvars[item]['fqdn'] | trim }}.conf
    group: root
    owner: root
    force: false
    mode: "0640"
  loop: "{{ groups['instances'] }}"
  when:
    - hostvars[item]['fqdn'] | default('', true) | trim
    - hostvars[item]['instance_state'] is undefined
  notify: Restart Nginx

- name: Generate Nginx config for instances valid FQDNs
  ansible.builtin.template:
    src: nginx/site.j2
    dest: /etc/nginx/conf.d/{{ hostvars[item]['fqdn'] | trim }}.conf
    owner: root
    group: root
    mode: "0640"
  loop: "{{ groups['instances'] }}"
  when:
    - hostvars[item]['fqdn'] | default('', true) | trim
    - hostvars[item]['instance_state'] is undefined
  notify: Restart Nginx

- name: Copy static Nginx config for instances without FQDNs
  ansible.builtin.copy:
    src: nginx/default.conf
    dest: /etc/nginx/static/default.conf
    owner: root
    group: root
    mode: "0640"
    force: false
  loop: "{{ groups['instances'] }}"
  when:
    - not (hostvars[item]['fqdn'] | default('', true) | trim)
    - hostvars[item]['instance_state'] is undefined
  notify: Restart Nginx

- name: Generate dynamic Nginx config for instances without FQDN
  ansible.builtin.template:
    src: nginx/default.j2
    dest: /etc/nginx/conf.d/default.conf
    owner: root
    group: root
    mode: "0640"
  loop: "{{ groups['instances'] }}"
  when:
    - not (hostvars[item]['fqdn'] | default('', true) | trim)
    - hostvars[item]['instance_state'] is undefined
  notify: Restart Nginx

# starting nginx service as it was stopped generaging letsencrypt.
- name: Start nginx service
  ansible.builtin.service:
    name: nginx
    state: started

- name: Flush Handlers
  ansible.builtin.meta: flush_handlers
