#!/bin/sh
#         ____  __  ______________
#        / __ \/ / / /  _/ ___/__ \
#       / / / / /_/ // / \__ \__/ /
#      / /_/ / __  // / ___/ / __/
#     /_____/_/ /_/___//____/____/
#
#    DHIS2 restore database backup (for local PostgreSQL)

set -e

PROG=$(basename "$0")
BACKUPFILE="$1"
DB="$2"

usage() {
  echo "Usage: $PROG <backup file (tar.gz)> <dbname>"
  echo "  backup file: database dump in tar gzip format"
  echo "  dbname: the name of the database to restore"
  echo "Options:"
  echo "  -h, --help        Display this help message"
  echo ""
  echo "Prerequisites:"
  echo "  - **PostgreSQL must be installed and running** directly on this machine."
  echo "  - The **'postgres' system user** must exist (usually created by PostgreSQL installation) and have permissions to manage databases via 'sudo -u postgres'."
  echo "  - The **DHIS2 database user** (e.g., 'dhis2', which often matches 'dbname') must exist within PostgreSQL and have appropriate privileges."
  echo "  - The 'psql', 'dropdb', and 'createdb' commands must be in your system's PATH."
}

# ---
# Argument and Help Handling
# ---

# Check for help flag
if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
  usage
  exit 0
fi

# Check for required arguments
if [ -z "$BACKUPFILE" ] || [ -z "$DB" ]; then
  echo "Error: Missing required arguments."
  usage
  exit 1
fi

# Check if backup file exists
if [ ! -f "$BACKUPFILE" ]; then
  echo "Error: Backup file '$BACKUPFILE' not found."
  usage
  exit 1
fi

echo "---"
echo "Attempting to restore database '$DB' from '$BACKUPFILE'..."
echo "---"

# ---
# Database Operations
# ---

# Drop the existing database
echo "Dropping existing database '$DB'..."
# Run as 'postgres' user to ensure permissions
sudo -u postgres dropdb "$DB" || { echo "Error: Failed to drop database '$DB'. It might not not exist, or you lack sufficient permissions. Continuing, assuming a fresh creation or existing DB is fine."; }
echo "Database '$DB' drop attempt completed."

# Create a new database with the specified owner
echo "Creating new database '$DB' with owner '$DB'..."
# -O $DB sets the owner of the new database
sudo -u postgres createdb -O "$DB" "$DB" || { echo "Error: Failed to create database '$DB'. Ensure the user '$DB' exists in PostgreSQL and 'postgres' user has creation rights."; exit 1; }
echo "Database '$DB' created successfully."

# Restore the database from the backup file
echo "Restoring data from '$BACKUPFILE' into '$DB'..."
# zcat decompresses the .tar.gz backup
# grep -v 'ALTER .* OWNER' filters out ownership changes from the dump
# psql imports the data into the specified database
zcat "$BACKUPFILE" | grep -v 'ALTER .* OWNER' | sudo -u postgres psql "$DB" || { echo "Error: Database restore failed. Check the backup file and PostgreSQL logs."; exit 1; }
echo "Data restored successfully."

# Reassign objects owned by 'root' (or other unintended users) to the correct DB owner
echo "Reassigning objects owned by 'root' to database owner '$DB'..."
# This command ensures all objects in the database are owned by the intended application user
echo "REASSIGN OWNED BY root TO \"$DB\"" | sudo -u postgres psql "$DB" || { echo "Error: Failed to reassign ownership. This might indicate deeper permission issues."; exit 1; }
echo "Ownership reassigned successfully."

echo "---"
echo "Database restore for '$DB' completed successfully."
echo "---"
